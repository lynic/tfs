[[local|localrc]]
ADMIN_PASSWORD="{{ admin_password }}"
MYSQL_PASSWORD="{{ mysql_password }}"
RABBIT_PASSWORD="{{ rabbit_password }}"
SERVICE_PASSWORD="{{ service_password }}"
SERVICE_TOKEN="{{ service_token }}"
HOST_IP="{{ ansible_default_ipv4.address }}"
#OFFLINE=True
#RECLONE=yes
#PIP_UPGRADE=True
#USE_VENV=True
GIT_BASE="{{ git_base }}"
#GIT_BASE=https://github.com


SERVICE_TIMEOUT=180
API_WORKERS=1

#DEST=$HOME/stack
#DATA_DIR=$HOME/data
LOGFILE=$DEST/logs/stack.sh.log
LOGDAYS=2
LOG_COLOR=True
VERBOSE=True

REGION_NAME=RegionOne
KEYSTONE_TOKEN_FORMAT=UUID

# Configuration for Region2
#REGION_NAME=RegionTwo
#KEYSTONE_SERVICE_HOST=8.8.8.8
#KEYSTONE_AUTH_HOST=8.8.8.8

OS_BRANCH="{{ os_branch }}"
#NOVA_BRANCH=stable/kilo
#CINDER_BRANCH=stable/kilo
#GLANCE_BRANCH=stable/kilo
#HORIZON_BRANCH=stable/kilo
#KEYSTONE_BRANCH=stable/kilo
#NEUTRON_BRANCH=stable/kilo
#HEAT_BRANCH=stable/kilo
#SWIFT_BRANCH=stable/kilo

# Nova services
LIBVIRT_TYPE="{{ libvirt_type }}"

# Cinder services
VOLUME_GROUP="stack-volumes"
VOLUME_NAME_PREFIX="volume-"
VOLUME_BACKING_FILE_SIZE=10G

{% if swift | bool %}
# Swift services
SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
SWIFT_REPLICAS=1
SWIFT_DATA_DIR=$DEST/data
SWIFT_LOOPBACK_DISK_SIZE=10G
enable_service s-proxy s-object s-container s-account c-bak
{% endif %}

{% if placement | bool %}
# Placement services
enable_service placement-api placement-client
{% endif %}

# Neutron services
Q_PLUGIN="{{ net_plugin }}"
IP_VERSION="{{ ip_version }}"
#Q_USE_SECGROUP=True
#ENABLE_TENANT_TUNNELS=True
#ENABLE_TENANT_VLANS=True
#TENANT_VLAN_RANGE=3001:4000
#PHYSICAL_NETWORK=default
#OVS_PHYSICAL_BRIDGE=br-ex
#Q_USE_PROVIDER_NETWORKING=True
disable_service n-net
enable_service q-svc neutron
{% if not vmware | bool %}
enable_service q-agt q-dhcp q-l3 q-meta 
{% endif %}

{% if floating is defined and floating is not none %}
FLOATING_RANGE="{{ floating.cidr }}"
Q_FLOATING_ALLOCATION_POOL=start={{ floating.start }},end={{ floating.end }}
PUBLIC_NETWORK_GATEWAY="{{ floating.gateway }}"
{% endif %}

{% if lbaas | bool %}
# LBaaSv2
enable_plugin neutron-lbaas https://github.com/openstack/neutron-lbaas.git $OS_BRANCH
enable_plugin octavia https://github.com/openstack/octavia.git $OS_BRANCH
{% if horizon | bool %}
# LBaaS Dashboard
enable_plugin neutron-lbaas-dashboard https://git.openstack.org/openstack/neutron-lbaas-dashboard $OS_BRANCH
{% endif %}
enable_service q-lbaasv2
enable_service octavia o-cw o-hk o-hm o-api
{% endif %}

{% if vmware | bool %}
LIBS_FROM_GIT=vmware-nsxlib
VIRT_DRIVER=vsphere
CINDER_DRIVER=vsphere
CINDER_ENABLED_BACKENDS=vsphere

VMWAREAPI_IP="{{ vcenter_ip }}"
VMWAREAPI_USER="{{ vcenter_user }}"
VMWAREAPI_PASSWORD="{{ vcenter_password }}"
VMWAREAPI_CLUSTER="{{ vcenter_cluster }}"
VMWAREAPI_INSECURE=True

enable_service {{ net_plugin }}
disable_service q-agt q-dhcp q-l3 q-meta
# DVS_INTERFACE=eth1:1
# VMWARE_DVS_NAME="{{ vcenter_dvs_name }}"
# enable_plugin vmware-nsx http://p3-review.eng.vmware.com/vmware_nsx marvin
enable_plugin vmware-nsx https://git.openstack.org/openstack/vmware-nsx $OS_BRANCH
enable_plugin nova-mksproxy https://github.com/openstack/nova-mksproxy
# enable_plugin vmware-vspc https://github.com/openstack/vmware-vspc
IPV6_ENABLED=False
Q_USE_PROVIDERNET_FOR_PUBLIC=False

NSXV_MANAGER_URI="{{ nsx_url }}"     # vsm
NSXV_USER="{{ nsx_user }}"
NSXV_PASSWORD="{{ nsx_password }}"
NSXV_VDN_SCOPE_ID="{{ nsx_transport_zone }}"                # Transport Zone
NSXV_DVS_ID="{{ nsx_dvs }}"                          # DVS, the Distributed Switch
NSXV_DATACENTER_MOID="{{ nsx_datacenter }}"           # FalconDC
NSXV_DATASTORE_ID="{{ nsx_datastore }}"              # Datastore
NSXV_RESOURCE_POOL_ID="{{ nsx_resource_pool }}"         # ResPool
NSXV_EXTERNAL_NETWORK="{{ nsx_external_network }}"        # VM Network
NSXV_CLUSTER_MOID="{{ nsx_cluster }}"               # Cluster1
NSXV_BACKUP_POOL=service:compact:2:3
 
# metadata service
# NSXV_MGT_NET_MOID=dvportgroup-66
# NSXV_MGT_NET_PROXY_IPS=10.155.20.98
# NSXV_MGT_NET_PROXY_NETMASK=255.255.255.0
# NSXV_NOVA_METADATA_IPS=10.155.20.97
# NSXV_METADATA_SHARED_SECRET=secret
{% endif %}

{% if not (horizon | bool) %}
# Horizon
disable_service horizon
{% endif %}

{% if not (tempest | bool) %}
# Tempest
disable_service tempest
{% endif %}

{% if (heat | bool) %}
# Heat services
# LIBS_FROM_GIT+=',python-heatclient'
{% if os_branch == "stable/mitaka" %}
HEAT_ENABLE_ADOPT_ABANDON=True
enable_service heat h-api h-api-cfn h-api-cw h-eng
{% else %}
enable_plugin heat https://git.openstack.org/openstack/heat $OS_BRANCH
{% endif %}
{% endif %}

{% if (ceilometer | bool) %}
# Ceilometer services
CEILOMETER_BACKEND=mongodb
CEILOMETER_PIPELINE_INTERVAL=600
enable_plugin ceilometer https://git.openstack.org/openstack/ceilometer $OS_BRANCH
{% endif %}

{% if (aodh | bool) %}
# Enable the aodh alarming services
enable_plugin aodh https://git.openstack.org/openstack/aodh $OS_BRANCH
{% endif %}

{% if (gnocchi | bool) %}
# Enable gnocchi services
enable_plugin gnocchi https://git.openstack.org/openstack/gnocchi $OS_BRANCH
{% endif %}

{% if (sahara | bool) %}
# Sahara services
enable_plugin sahara https://git.openstack.org/openstack/sahara $OS_BRANCH
{% endif %}

{% if (zaqar | bool) %}
# Zaqar service
enable_plugin zaqar https://git.openstack.org/openstack/zaqar $OS_BRANCH
{% endif %}

{% if (senlin | bool) %}
# Senlin service
enable_plugin senlin https://git.openstack.org/openstack/senlin $OS_BRANCH
{% if horizon | bool %}
enable_plugin senlin-dashboard https://git.openstack.org/openstack/senlin-dashboard $OS_BRANCH
{% endif %}
# LIBS_FROM_GIT+=',python-senlinclient'
{% endif %}

{% if (magnum | bool) %}
# Magnum service
enable_plugin magnum https://git.openstack.org/openstack/magnum $OS_BRANCH
{% endif %}

{% if (murano | bool) %}
# Murano service
enable_plugin murano https://git.openstack.org/openstack/murano $OS_BRANCH
{% endif %}

{% if (barbican | bool) %}
# Barbican service
enable_plugin barbican https://git.openstack.org/openstack/barbican $OS_BRANCH
{% endif %}

[[post-config|$NOVA_CONF]]
[DEFAULT]
cpu_allocation_ratio={{ cpu_ratio }}
ram_allocation_ratio={{ ram_ratio }}
osapi_compute_workers=1
ec2_workers=1
metadata_workers=1
[conductor]
workers=1
{% if vmware | bool %}
# Nova config for vmware
[vnc]
vncserver_proxyclient_address = {{ vcenter_ip }}
[vmware]
vnc_port = 5900
vnc_port_total = 6500
use_linked_clone = True
task_poll_interval=0.5
insecure = True
snapshot_format = template
{% endif %}


{% if heat | bool %}
[[post-config|$HEAT_CONF]]
[DEFAULT]
num_engine_workers=1
[heat_api]
workers=1
[heat_api_cfn]
workers=1
[heat_api_cloudwatch]
workers=1
{% endif %}

{% if vmware | bool %}
# Glance config for vmware
[[post-config|$GLANCE_API_CONF]]
[DEFAULT]
# Note(sabari): Update glanceclient >= 2.0.0 and remove show_multiple_locations
show_multiple_locations = True
# Note(sabari): This is redundant if show_multiple_locations is defined.
show_image_direct_url = True
[glance_store]
default_store=vsphere
stores = glance.store.vmware_datastore.Store, glance.store.http.Store, glance.store.filesystem.Store
vmware_server_host = {{ vcenter_ip }}
vmware_server_username = {{ vcenter_user }}
vmware_server_password = {{ vcenter_password }}
vmware_datastores = {{ vcenter_datacenter }}:{{ vcenter_datastore }}:100
vmware_insecure = True
[task]
work_dir = /tmp
[taskflow_executor]
conversion_format = vmdk
conversion_vmdk_adapter_type = lsiLogic
conversion_vmdk_disk_type = streamOptimized

# Cinder config for vmware
[[post-config|$CINDER_CONF]]
[DEFAULT]
default_volume_type = vsphere
enabled_backends = vsphere

[vsphere]
volume_driver = cinder.volume.drivers.vmware.vmdk.VMwareVcVmdkDriver
vmware_host_password = {{ vcenter_password }}
vmware_host_username = {{ vcenter_user }}
vmware_host_ip = {{ vcenter_ip }}
volume_backend_name = vsphere
vmware_insecure = True
vmware_image_format = template
{% endif %}